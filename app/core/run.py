"""
Toolchain for fetching news content and processing it into a podcast.
"""

import calendar
import json
import logging
import subprocess
import time

from colorama import init
from dotenv import load_dotenv

from app.core.db.config import close_database, initialize_database
from app.core.news.fetch import get_latest_news, save_news_to_db, save_news_to_file
from app.core.podcast.eleventify import render_jinja_template
from app.core.podcast.episode import add_articles_to_episode, add_episode_to_db
from app.core.podcast.mix import add_to_db, mix_audio, upload_to_s3
from app.core.podcast.voice import create_audio, delete_source_mp3
from app.core.summarization.backends import together as together_backend
from app.core.utilities import DATA_DIR, configure_logging, count_words, today, today_iso_fmt

raw_news = f"{DATA_DIR}/{today_iso_fmt}_news.json"
transcript = f"{DATA_DIR}/{today_iso_fmt}_podcast-content.txt"


def _read_json_file(file):
    with open(file) as f:
        return json.load(f)


def main():
    start_time = time.time()

    # Configure logging
    init()
    configure_logging()

    # Load environment variables
    load_dotenv()

    # Fetch news
    # news = get_latest_news()

    # Save news to a JSON file
    # save_news_to_file(news, raw_news)

    news = _read_json_file(raw_news)  # for testing

    # Connect to the database
    initialize_database()

    # Save news to the database
    save_news_to_db(news)

    # Create podcast transcript
    from app.core.podcast.content import create_transcript

    create_transcript(news, transcript, together_backend.summarize)

    # Create podcast audio
    output_key = create_audio(transcript)

    # Mix audio
    weekday = calendar.day_name[today.weekday()].lower()
    mix_audio(
        voice_track=f"{DATA_DIR}/{today_iso_fmt}/{today_iso_fmt}.src.mp3",
        music_track=f"{DATA_DIR}/instrumental/{weekday}.mp3",
    )

    # Upload podcast audio to S3
    url = upload_to_s3(
        src=f"{DATA_DIR}/{today_iso_fmt}_podcast_dist.mp3",
        dest_folder="zednews",
        dest_filename=f"{today_iso_fmt}_podcast_dist.mp3",
    )
    logging.info(f"MP3 URL: {url}")

    end_time = time.time()
    production_time = int(end_time - start_time)

    # Add the rest of the podcast metadata to the database

    # 1. MP3
    add_to_db(url, f"{DATA_DIR}/{today_iso_fmt}_podcast_dist.mp3")

    # 2. Episode
    word_count = count_words(transcript)
    add_episode_to_db(time_to_produce=production_time, word_count=word_count)

    # 3. Add articles to the episode
    add_articles_to_episode()

    # Render the Jinja template
    render_jinja_template(production_time, word_count)

    # Cleanup
    # delete the original audio file generated by AWS Polly
    delete_source_mp3(output_key)

    # Move the transcript and raw news files to today's directory
    # NOTE: Run a cron job to delete these files after a month
    subprocess.run(
        f"mv -v {transcript} {DATA_DIR}/{today_iso_fmt}/",
        shell=True,
    )
    subprocess.run(
        f"mv -v {raw_news} {DATA_DIR}/{today_iso_fmt}/",
        shell=True,
    )

    # Close the database connection
    close_database()


if __name__ == "__main__":
    main()
