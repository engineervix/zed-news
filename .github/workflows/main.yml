name: CI/CD

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: ["main"]
    paths-ignore: ["docs/**"]

  push:
    branches: ["main"]
    paths-ignore: ["docs/**"]
    tags:
      - "v*"

jobs:
  # Runs the isort, black & flake8 linting steps inside the specified containers rather than on the VM host.
  # Because of this the network configuration changes from host based network to a container network.
  linter_isort:
    runs-on: ubuntu-22.04
    container: python:3.10-slim-bullseye

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          pip install -q isort==5.12.0
      - name: isort
        run: |
          isort . --check-only --profile black

  linter_black:
    runs-on: ubuntu-22.04
    container: python:3.10-slim-bullseye

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          pip install -q black==23.3.0
      - name: black
        run: |
          black . --check

  linter_flake8:
    runs-on: ubuntu-22.04
    container: python:3.10-slim-bullseye

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          pip install -q flake8==6.0.0
      - name: flake8
        run: |
          flake8 app/core

  # Runs the frontend linting steps on the VM
  linter_stylelint:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci

      - name: Stylelint
        run: |
          npm run lint:style

  linter_eslint:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci

      - name: ESLint
        run: |
          npm run lint:js

  shellcheck:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt install shellcheck -y

      - name: Run shellcheck
        shell: bash
        run: |
          echo "${{ github.ref }}"
          bash -c 'shopt -s globstar; shellcheck ./*.sh;'

  # Runs the python test suite on the VM
  test:
    runs-on: ubuntu-22.04
    needs:
      [
        linter_isort,
        linter_black,
        linter_flake8,
        linter_stylelint,
        linter_eslint,
        shellcheck,
      ]

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip" # caching pip dependencies

      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt update --yes --quiet
          export DEBIAN_FRONTEND=noninteractive
          export TZ=Africa/Lusaka
          sudo apt install --yes --quiet --no-install-recommends tzdata libssl-dev ffmpeg
          sudo sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
          sudo locale-gen
          sudo ln -fs /usr/share/zoneinfo/Africa/Lusaka /etc/localtime
          sudo dpkg-reconfigure tzdata
          export LANG=en_US.UTF-8
          export LANGUAGE=en_US:en
          export LC_ALL=en_US.UTF-8
          python -m venv ~/venv
          source ~/venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt

      - name: Test with unittest
        shell: bash
        run: |
          # Note that you have to activate the virtualenv in every step
          # because GitHub actions doesn't preserve the environment
          source ~/venv/bin/activate

          # Run tests
          invoke test

      - name: "Upload coverage data"
        uses: actions/upload-artifact@v3
        with:
          name: covdata
          path: .coverage.*

  coverage:
    name: Coverage
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip" # caching pip dependencies

      - name: "Download coverage data"
        uses: actions/download-artifact@v3
        with:
          name: covdata

      - name: "Extract total coverage"
        run: |
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

      - name: "Create coverage badge"
        if: (github.repository == 'engineervix/zed-news') && (github.ref == 'refs/heads/main')
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: f4b1128b188c4e29722bc879e4ab6574
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}

  # Runs the next steps on the VM
  # Creates a GitHub Release when the lint & test jobs succeeds, and only on pushes to tags.
  release:
    needs:
      [
        linter_isort,
        linter_black,
        linter_flake8,
        linter_stylelint,
        linter_eslint,
        shellcheck,
        test,
      ]

    permissions:
      contents: write

    if: needs.test.result == 'success' && startsWith( github.ref, 'refs/tags/v' )

    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install invoke colorama tomli
      - name: Get the version
        id: get_version
        run: |
          echo "${{ github.ref }}"
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Generate Release Title
        id: get_release_title
        shell: bash
        run: |
          export TODAY="($(TZ=Africa/Lusaka date --iso))"
          echo ::set-output name=RELEASE_NAME::"${{ steps.get_version.outputs.VERSION }} $TODAY"
      - name: Extract Release Notes
        # This creates a file LATEST_RELEASE_NOTES.md in the parent directory (../)
        shell: bash
        run: |
          invoke get-release-notes
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_release_title.outputs.RELEASE_NAME }}
          body_path: ../LATEST_RELEASE_NOTES.md
